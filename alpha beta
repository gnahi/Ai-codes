
Code â€“
def alpha_beta(node, depth, alpha, beta, maximizing_player):
# If leaf node or depth 0, return the node's value
if depth == 0 or isinstance(node, int):
return node

if maximizing_player:
max_eval = float('-inf')
for child in node:
eval = alpha_beta(child, depth - 1, alpha, beta, False)
max_eval = max(max_eval, eval)
alpha = max(alpha, eval)
if beta <= alpha:
break # Beta cut-off
return max_eval
else:
min_eval = float('inf')
for child in node:
eval = alpha_beta(child, depth - 1, alpha, beta, True)
min_eval = min(min_eval, eval)
beta = min(beta, eval)
if beta <= alpha:
break # Alpha cut-off
return min_eval

# Example tree (nested lists)
game_tree = [
[3, 5, 6],
[3, 2, 9],
[0, 1, 4]
]

# Run alpha-beta on the tree, starting with maximizing player
best_value = alpha_beta(game_tree, depth=3, alpha=float('-inf'),
beta=float('inf'), maximizing_player=True)
print("Best value:", best_value)



